package org.apache.struts.action;

import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.lang.Nullable;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import java.util.Locale;

import static org.apache.struts.Globals.*;

public abstract class Action {
  /**
   * Process the specified HTTP request, and create the corresponding HTTP
   * response (or forward to another web component that will create it), with
   * provision for handling exceptions thrown by the business logic. Return
   * an `ActionForward` instance describing where and how control should be
   * forwarded, or `null` if the response has already been completed.
   */
  public abstract ActionForward execute(
    ActionMapping mapping,
    @Nullable ActionForm form,
    HttpServletRequest request,
    HttpServletResponse response
  ) throws Exception;

  /**
   * Adds the specified messages keys into the appropriate request attribute
   * for use by the `<html:messages>` tag (if messages="true" is set), if any
   * messages are required. Initialize the attribute if it has not already
   * been. Otherwise, ensure that the request attribute is not set.
   */
  protected void addMessages(
    HttpServletRequest request,
    @Nullable ActionMessages messages
  ) {
    if (messages == null) {
      return;
    }
    var requestMessages = (ActionMessages) request.getAttribute(MESSAGES_KEY);
    if (requestMessages == null) {
      requestMessages = new ActionMessages();
    }
    requestMessages.add(messages);
    saveMessages(request, requestMessages);
  }

  /**
   * Save the specified error messages keys into the appropriate request
   * attribute for use by the `<html:errors>` tag, if any messages are
   * required. Otherwise, ensure that the request attribute is not created.
   */
  protected void saveErrors(
    HttpServletRequest request,
    @Nullable ActionMessages errors
  ) {
    var empty = errors == null || errors.isEmpty();
    if (empty) {
      request.removeAttribute(ERROR_KEY);
    }
    else {
      request.setAttribute(ERROR_KEY, errors);
    }
  }

  /**
   * Save the specified messages keys into the appropriate request attribute
   * for use by the <html:messages> tag (if messages="true" is set), if any
   * messages are required. Otherwise, ensure that the request attribute is
   * not created.
   */
  protected void saveMessages(
    HttpServletRequest request,
    @Nullable ActionMessages messages
  ) {
    var empty = messages == null || messages.isEmpty();
    if (empty) {
      request.removeAttribute(MESSAGES_KEY);
    }
    else {
      request.setAttribute(MESSAGES_KEY, messages);
    }
  }

  /**
   * Return the user's currently selected Locale.
   */
  protected Locale getLocale(HttpServletRequest request) {
    return LocaleContextHolder.getLocale();
  }

  /**
   * Returns `true` if the current form's cancel button was pressed. This
   * method will check if the `Globals.CANCEL_KEY` request attribute has been
   * set, which normally occurs if the cancel button generated by `CancelTag`
   * was pressed by the user in the current request. If `true`, validation
   * performed by an `ActionForm#validate()` method will have been skipped by
   * the controller servlet.
   * Since Action 1.3.0, the mapping for a cancellable Action must also have
   * the new "cancellable" property set to true. If "cancellable" is not set,
   * and the magic Cancel token is found in the request, the standard
   * Composable Request Processor will throw an InvalidCancelException.
   */
  protected boolean isCancelled(HttpServletRequest request) {
    return request.getAttribute(CANCEL_KEY) != null;
  }

  /**
   * Return the servlet instance to which we are attached.
   * **NOTE:**
   * The instance returned by this method is a dummy implementation of the
   * ActionServlet class, as the Spring framework's DispatchServlet is used
   * instead.
   */
  public ActionServlet getServlet() {
    return servlet;
  }
  protected ActionServlet servlet = new ActionServlet();
}
